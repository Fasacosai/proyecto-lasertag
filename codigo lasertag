#include <msp430.h>

// === Prototipos ===
void configurar_DCO_16MHz(void);
void configurar_UART(void);
void configurar_boton(void);
void configurar_timer_LEDherida(void);
void configurar_timer_multiplexado(void);
void configurar_timer_tiempo(void);
void configurar_PWM_38kHz(void);
void configurar_puertos(void);
void enviar_UART(char c);
void mostrar_segmentos(unsigned char valor);
void procesar_multiplexado(void);
void procesar_tiempo(void);

// === Variables globales ===
volatile unsigned char boton_presionado = 0;
volatile unsigned char vidas = 3;
volatile unsigned char balas = 15;
volatile unsigned char mostrar_display = 0;

volatile unsigned char led_indicador_activo = 0;
volatile unsigned int contador_led_indicador = 0;

volatile unsigned char recargando = 0;
volatile unsigned int contador_recarga = 0;

volatile unsigned char bandera_multiplexado = 0;
volatile unsigned char bandera_tiempo = 0;

// === Tabla segmentos común cátodo ===
const unsigned char mapa_segmentos[16] = {
    0b1111110, 0b0110000, 0b1101101, 0b1111001,
    0b0110011, 0b1011011, 0b1011111, 0b1110000,
    0b1111111, 0b1111011, 0b1110111, 0b0011111,
    0b1001110, 0b0111101, 0b1001111, 0b1000111
};

void main(void) {
    WDTCTL = WDTPW | WDTHOLD;

    configurar_DCO_16MHz();
    configurar_UART();
    configurar_boton();
    configurar_timer_LEDherida();
    configurar_timer_multiplexado();
    configurar_timer_tiempo();
    configurar_PWM_38kHz();
    configurar_puertos();

    __enable_interrupt();

    while (1) {
        if (bandera_multiplexado) {
            bandera_multiplexado = 0;
            procesar_multiplexado();
        }

        if (bandera_tiempo) {
            bandera_tiempo = 0;
            procesar_tiempo();
        }

        if (boton_presionado) {
            boton_presionado = 0;

            if (led_indicador_activo || recargando || vidas == 0) {
                P1IE |= BIT3;
                continue;
            }

            __delay_cycles(16000);

            if (!(P1IN & BIT3) && balas > 0) {
                balas--;
                enviar_UART(06);
                __delay_cycles(300000);

                P2OUT |= BIT0;
                led_indicador_activo = 1;
                contador_led_indicador = 0;

                P1IE &= ~BIT3;

                if (balas == 0 && !recargando) {
                    recargando = 1;
                    contador_recarga = 0;
                }
            }

            P1IE |= BIT3;
        }

        __no_operation();
    }
}

// === Configuraciones ===

void configurar_DCO_16MHz(void) {
    UCSCTL3 = SELREF_2;
    UCSCTL4 |= SELA_2;
    __bis_SR_register(SCG0);
    UCSCTL1 = DCORSEL_5;
    UCSCTL2 = 487;
    __bic_SR_register(SCG0);
    __delay_cycles(500000);
}

void configurar_UART(void) {
    P3SEL |= BIT3 + BIT4;
    UCA0CTL1 |= UCSWRST;
    UCA0CTL1 |= UCSSEL_1;
    UCA0BR0 = 27;
    UCA0BR1 = 0;
    UCA0MCTL = UCBRS_0;
    UCA0CTL1 &= ~UCSWRST;
    UCA0IE |= UCRXIE;
}

void configurar_boton(void) {
    P1DIR &= ~BIT3;
    P1REN |= BIT3;
    P1OUT |= BIT3;
    P1IE |= BIT3;
    P1IES |= BIT3;
    P1IFG &= ~BIT3;
}

void configurar_timer_LEDherida(void) {
    TA0CCR0 = 32768 - 1;
    TA0CCTL0 = CCIE;
    TA0CTL = TASSEL_1 | MC_0 | TACLR;
}

void configurar_timer_multiplexado(void) {
    TA1CCR0 = 32000 - 1;
    TA1CCTL0 = CCIE;
    TA1CTL = TASSEL_2 | MC_1 | TACLR;
}

void configurar_timer_tiempo(void) {
    TA2CCR0 = 16000 - 1;
    TA2CCTL0 = CCIE;
    TA2CTL = TASSEL_2 | MC_1 | TACLR;
}

void configurar_PWM_38kHz(void) {
    P2DIR |= BIT4;
    P2SEL |= BIT4;
    TA2CCR0 = 421;
    TA2CCR1 = 210;
    TA2CCTL1 = OUTMOD_7;
}

void configurar_puertos(void) {
    P6DIR |= BIT1 | BIT2 | BIT3 | BIT4 | BIT5 | BIT6;
    P1DIR |= BIT6;
    P6OUT &= ~(BIT1 | BIT2 | BIT3 | BIT4 | BIT5 | BIT6);
    P1OUT &= ~BIT6;

    P8DIR |= BIT1;
    P3DIR |= BIT7;
    P8OUT &= ~BIT1;
    P3OUT &= ~BIT7;

    P2DIR |= BIT0;
    P2OUT &= ~BIT0;

    P1DIR |= BIT0;
    P1OUT &= ~BIT0;
}

void mostrar_segmentos(unsigned char valor) {
    P6OUT &= ~(BIT1 | BIT2 | BIT3 | BIT4 | BIT5 | BIT6);
    P1OUT &= ~BIT6;

    if (valor & 0b1000000) P6OUT |= BIT1;
    if (valor & 0b0100000) P6OUT |= BIT2;
    if (valor & 0b0010000) P6OUT |= BIT3;
    if (valor & 0b0001000) P6OUT |= BIT4;
    if (valor & 0b0000100) P6OUT |= BIT5;
    if (valor & 0b0000010) P6OUT |= BIT6;
    if (valor & 0b0000001) P1OUT |= BIT6;
}

void procesar_multiplexado(void) {
    if (mostrar_display == 0) {
        mostrar_segmentos(mapa_segmentos[vidas]);
        P8OUT |= BIT1;
        P3OUT &= ~BIT7;
        mostrar_display = 1;
    } else {
        mostrar_segmentos(mapa_segmentos[balas]);
        P3OUT |= BIT7;
        P8OUT &= ~BIT1;
        mostrar_display = 0;
    }
}

void procesar_tiempo(void) {
    if (led_indicador_activo) {
        contador_led_indicador++;
        if (contador_led_indicador >= 5000) {
            P2OUT &= ~BIT0;
            led_indicador_activo = 0;
            contador_led_indicador = 0;
            P1IE |= BIT3;
        }
    }

    if (recargando) {
        contador_recarga++;
        if ((contador_recarga % 500) == 0) {
            P2OUT ^= BIT0;
        }

        if (contador_recarga >= 500000) {
            balas = 15;
            recargando = 0;
            contador_recarga = 0;
            P2OUT &= ~BIT0;
            P1IE |= BIT3;
        }
    }
}

void enviar_UART(char c) {
    while (!(UCA0IFG & UCTXIFG));
    UCA0TXBUF = c;
}

// === Interrupciones ===

#pragma vector=PORT1_VECTOR
__interrupt void ISR_Boton(void) {
    if (P1IFG & BIT3) {
        boton_presionado = 1;
        P1IE &= ~BIT3;
        P1IFG &= ~BIT3;
        __bic_SR_register_on_exit(LPM0_bits);
    }
}

#pragma vector=USCI_A0_VECTOR
__interrupt void ISR_UART(void) {
    if (UCA0IV == 2) {
        char recibido = UCA0RXBUF;
        if (recibido == 02 || recibido == 04 || recibido == 05 || recibido == 06 || recibido == 07 ||
            recibido == 09 || recibido == 12 || recibido == 15 || recibido == 16 || recibido == 17 ||
            recibido == 19 || recibido == 23 || recibido == 24 || recibido == 25 || recibido == 27 && vidas > 0) {
            vidas--;
            P1OUT |= BIT0;
            TA0CTL |= MC_1 | TACLR;
        }
        __bic_SR_register_on_exit(LPM0_bits);
    }
}

#pragma vector=TIMER0_A0_VECTOR
__interrupt void TIMER0_A0_ISR(void) {
    P1OUT &= ~BIT0;
    TA0CTL &= ~MC_3;
    TA0CCTL0 &= ~CCIFG;
    __bic_SR_register_on_exit(LPM0_bits);
}

#pragma vector=TIMER1_A0_VECTOR
__interrupt void TIMER1_A0_ISR(void) {
    bandera_multiplexado = 1;
    __bic_SR_register_on_exit(LPM0_bits);
}

#pragma vector=TIMER2_A0_VECTOR
__interrupt void TIMER2_A0_ISR(void) {
    bandera_tiempo = 1;
    __bic_SR_register_on_exit(LPM0_bits);
}
